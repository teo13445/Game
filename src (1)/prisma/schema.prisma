datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// Find more in here
// https://www.prisma.io/nextjs

model Product {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  name       String    @unique
  slug       String    @unique
  detail     String
  image      Image?    @relation(fields: [imageId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  imageId    String?   @unique @db.ObjectId
  variants   Variant[]
  categoryId String?   @db.ObjectId
  category   Category? @relation(fields: [categoryId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  parent     Product?  @relation("ParentChildren", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  parentId   String?   @db.ObjectId
  children   Product[] @relation("ParentChildren")
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}

model Variant {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  product   Product    @relation(fields: [productId], references: [id])
  productId String     @db.ObjectId
  price     Float
  discount  Float?
  quantity  Int
  count     Int
  color     Color?     @relation(fields: [colorId], references: [id])
  colorId   String?    @db.ObjectId
  images    Image[]
  comments  Comment[]
  wishlist  Wishlist[]
  inCart InCart[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model Image {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  url       String
  alt       String
  variant   Variant?  @relation(fields: [variantId], references: [id])
  variantId String?   @db.ObjectId
  product   Product?
  category  Category?
}

model Color {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  name      String    @unique
  code      String?
  variants  Variant[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Comment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  comment   String
  rating    Int
  variant   Variant  @relation(fields: [variantId], references: [id])
  variantId String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  name      String     @unique
  slug      String     @unique
  products  Product[]
  image     Image?     @relation(fields: [imageId], references: [id])
  imageId   String?    @unique @db.ObjectId
  parent    Category?  @relation("ParentChildren", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  parentId  String?    @db.ObjectId
  children  Category[] @relation("ParentChildren")
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model User {
  id             String     @id @default(auto()) @map("_id") @db.ObjectId
  email          String     @unique
  name           String
  verifyEmail    Boolean    @default(false)
  hashedPassword String
  address        String     @default("Chưa có địa chỉ")
  comment        Comment[]
  wishlist       Wishlist[]
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
}

model Wishlist {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  user      User    @relation(fields: [emailUser], references: [email])
  emailUser String 
  variant   Variant @relation(fields: [variantId], references: [id])
  variantId String  @db.ObjectId
}

model Cart{
  id  String  @id @default(auto()) @map("_id") @db.ObjectId
  name String
  email String
  address String
  city String @default("Hồ Chí Minh")
  phone String
  status String
  total Float
  inCarts InCart[]
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
}

model InCart{
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  variant Variant @relation(fields: [variantId], references: [id])
  variantId String  @db.ObjectId
  quantity Int
  total Float
  cart Cart  @relation(fields: [cartId], references: [id])
  cartId String @db.ObjectId
}